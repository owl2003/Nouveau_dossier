import { StyleSheet, Text, TouchableOpacity, View, StatusBar, Alert, I18nManager } from "react-native";
import React, { useState } from "react";
import { Ionicons } from "@expo/vector-icons";
import { colors } from "../../constants";
import CustomInput from "../../components/CustomInput";
import CustomButton from "../../components/CustomButton";
import { LinearGradient } from 'expo-linear-gradient';
import { supabase } from "../../supabase";

const UpdatePasswordScreen = ({ navigation }) => {
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [loading, setLoading] = useState(false);

  const updatePasswordHandle = async () => {
    try {
      // Basic validation
      if (!currentPassword || !newPassword || !confirmPassword) {
        Alert.alert("تنبيه", "الرجاء ملء جميع الحقول");
        return;
      }

      if (newPassword !== confirmPassword) {
        Alert.alert("تنبيه", "كلمة المرور الجديدة غير متطابقة");
        return;
      }

      if (newPassword.length < 6) {
        Alert.alert("تنبيه", "يجب أن تكون كلمة المرور الجديدة 6 أحرف على الأقل");
        return;
      }

      setLoading(true);

      // First, verify the current password by trying to sign in
      const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
        email: (await supabase.auth.getUser()).data.user?.email || '',
        password: currentPassword
      });

      if (signInError) {
        Alert.alert("خطأ", "كلمة المرور الحالية غير صحيحة");
        setLoading(false);
        return;
      }

      // If current password is correct, update to new password
      const { data, error } = await supabase.auth.updateUser({
        password: newPassword
      });

      if (error) {
        throw error;
      }

      // Success
      Alert.alert(
        "نجاح",
        "تم تحديث كلمة المرور بنجاح",
        [
          {
            text: "حسناً",
            onPress: async () => {
              // Sign out after password change
              await supabase.auth.signOut();
              navigation.reset({
                index: 0,
                routes: [{ name: 'login' }],
              });
            }
          }
        ]
      );

    } catch (error) {
      console.error('Error:', error);
      
      let errorMessage = 'حدث خطأ أثناء تحديث كلمة المرور';
      
      if (error.message?.includes('Password')) {
        errorMessage = 'كلمة المرور غير صالحة';
      } else if (error.message?.includes('auth')) {
        errorMessage = 'خطأ في المصادقة';
      }

      Alert.alert("خطأ", errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <StatusBar backgroundColor={colors.primary} barStyle="light-content" />
      
      <LinearGradient
        colors={[colors.primary, colors.primary + '90']}
        style={styles.header}
      >
        <View style={styles.topBar}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Ionicons name="chevron-forward" size={26} color={colors.white} />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>تغيير كلمة المرور</Text>
          <View style={{ width: 30 }} />
        </View>
      </LinearGradient>

      <View style={styles.content}>
        <View style={styles.infoBox}>
          <Ionicons name="lock-closed" size={30} color={colors.primary} />
          <Text style={styles.infoText}>
            يجب أن تكون كلمة المرور الجديدة مختلفة عن كلمة المرور السابقة
          </Text>
        </View>

        <View style={styles.formContainer}>
          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>كلمة المرور الحالية</Text>
            <CustomInput
              value={currentPassword}
              setValue={setCurrentPassword}
              placeholder="ادخل كلمة المرور الحالية"
              secureTextEntry={true}
              textAlign="right"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>كلمة المرور الجديدة</Text>
            <CustomInput
              value={newPassword}
              setValue={setNewPassword}
              placeholder="ادخل كلمة المرور الجديدة"
              secureTextEntry={true}
              textAlign="right"
            />
          </View>

          <View style={styles.inputGroup}>
            <Text style={styles.inputLabel}>تأكيد كلمة المرور</Text>
            <CustomInput
              value={confirmPassword}
              setValue={setConfirmPassword}
              placeholder="أعد إدخال كلمة المرور الجديدة"
              secureTextEntry={true}
              textAlign="right"
            />
          </View>
        </View>

        <CustomButton
          text={loading ? "جاري التحديث..." : "تحديث كلمة المرور"}
          onPress={updatePasswordHandle}
          radius={10}
          style={styles.updateButton}
          disabled={loading}
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.light,
  },
  header: {
    paddingTop: StatusBar.currentHeight,
    paddingBottom: 20,
    borderBottomLeftRadius: 25,
    borderBottomRightRadius: 25,
  },
  topBar: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 15,
    paddingTop: 10,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255,255,255,0.2)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: colors.white,
  },
  content: {
    flex: 1,
    padding: 20,
  },
  infoBox: {
    backgroundColor: colors.primary + '10',
    borderRadius: 15,
    padding: 20,
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 25,
  },
  infoText: {
    flex: 1,
    marginRight: 15,
    fontSize: 14,
    color: colors.primary,

    textAlign: 'right',
    lineHeight: 20,
  },
  formContainer: {
    marginBottom: 25,
  },
  inputGroup: {
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.dark,
    marginBottom: 8,
    textAlign: 'left',
  },
  updateButton: {
    marginTop: 10,
  },
});

export default UpdatePasswordScreen;
